#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;


out vec3 LightIntensity;
out vec2 TexCoord;

vec4 lightPosition = vec4 (0.0, 15.0, 7.0, 1.0); // Light position in world coords.
vec3 Ka = vec3 (1.0, 1.0, 1.0); // green diffuse surface reflectance
vec3 La = vec3 (0.2, 0.2, 0.2); // Light source intensity

vec3 Kd = vec3 (1.0, 1.0, 1.0); // green diffuse surface reflectance
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity

vec3 Ks = vec3 (1.0, 1.0, 1.0); // green diffuse surface reflectance
vec3 Ls = vec3 (1.0, 1.0, 1.0); // Light source intensity

float specular_exponent = 100.0;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

void main(){

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  // Convert normal and position to eye coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  //normalised vector towards the light source
  vec3 s = normalize(vec3(lightPosition - eyeCoords));
  

  // camera code
  vec3 position_eye = vec3(eyeCoords);


  //Ambient Intensity
  vec3 Ia = La * Ka;

  //Diffuse Intensity
  //vec3 position_eye = vec3 (0.0,0.0,0.3);
  vec3 light_position_eye = vec3 (view * lightPosition);
  vec3 L = normalize (light_position_eye - position_eye);
  float dot_prod = max(dot (L, tnorm), 0.0);
  vec3 Id = Ld * Kd * dot_prod;

  //Specular Intensity
  vec3 R = reflect (-L, tnorm);
  vec3 V = normalize (-position_eye);
  float dot_prod_specular = max(dot (R, V), 0.0);
  float specular_factor = pow (dot_prod_specular, specular_exponent);
  vec3 Is = Ls * Ks * specular_factor;

  LightIntensity = Ia + Id + Is;
  
  // Convert position to clip coordinates and pass along
  TexCoord = vec2 (vertex_texture.x, (1 - vertex_texture.y));
  //TexCoord = vec2 (0.9, 0.9);
  gl_Position = proj * view * model * vec4(vertex_position,1.0);
}


  